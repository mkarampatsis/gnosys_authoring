{"version":3,"file":"form-simple-top-down.component.js","sourceRoot":"","sources":["../../../../../../libs/ui/src/lib/form-simple-top-down/form-simple-top-down.component.ts","../../../../../../libs/ui/src/lib/form-simple-top-down/form-simple-top-down.component.html"],"names":[],"mappings":"AAAA,OAAO,EACL,SAAS,EAET,uBAAuB,EACvB,KAAK,GACN,MAAM,eAAe,CAAC;AACvB,OAAO,EAAe,SAAS,EAAc,MAAM,wBAAwB,CAAC;AAE5E,OAAO,KAAK,CAAC,MAAM,QAAQ,CAAC;;;;AAQ5B,MAAM,OAAO,0BAA0B;IANvC;QAQE,aAAQ,GAAoB,EAAE,CAAC;KA4BhC;IA1BC,QAAQ;QACN,KAAK,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE;YAC5D,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC;SAC3C;IACH,CAAC;IAED,QAAQ,CAAC,OAA4B;QACnC,IAAI,OAAO,CAAC,MAAM,IAAI,IAAI,EAAE;YAC1B,MAAM,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;YAC7C,QAAQ,KAAK,EAAE;gBACb,KAAK,UAAU;oBACb,OAAO,uBAAuB,CAAC;gBACjC,KAAK,OAAO;oBACV,OAAO,kBAAkB,CAAC;gBAC5B,KAAK,WAAW;oBACd,OAAO,0BAA0B,CAAC;gBACpC,KAAK,WAAW;oBACd,OAAO,yBAAyB,CAAC;aACpC;SACF;QACD,OAAO,EAAE,CAAC;IACZ,CAAC;IAED,QAAQ,CAAC,CAAS;QAChB,OAAO,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;IACxB,CAAC;;wHA7BU,0BAA0B;4GAA1B,0BAA0B,mGChBvC,s5CA8CA;4FD9Ba,0BAA0B;kBANtC,SAAS;mBAAC;oBACT,QAAQ,EAAE,yBAAyB;oBACnC,WAAW,EAAE,uCAAuC;oBACpD,SAAS,EAAE,CAAC,sCAAsC,CAAC;oBACnD,eAAe,EAAE,uBAAuB,CAAC,MAAM;iBAChD;8BAEU,SAAS;sBAAjB,KAAK","sourcesContent":["import {\n  Component,\n  OnInit,\n  ChangeDetectionStrategy,\n  Input,\n} from '@angular/core';\nimport { FormControl, FormGroup, ControlsOf } from '@ngneat/reactive-forms';\nimport { Generic, Controls } from '@gnosys/interfaces';\nimport * as _ from 'lodash';\n\n@Component({\n  selector: 'ui-form-simple-top-down',\n  templateUrl: './form-simple-top-down.component.html',\n  styleUrls: ['./form-simple-top-down.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FormSimpleTopDownComponent implements OnInit {\n  @Input() formGroup!: FormGroup<ControlsOf<Generic>>;\n  controls: Array<Controls> = [];\n\n  ngOnInit(): void {\n    for (const [k, v] of Object.entries(this.formGroup.controls)) {\n      this.controls.push({ name: k, value: v });\n    }\n  }\n\n  getError(control: FormControl<string>) {\n    if (control.errors != null) {\n      const error = Object.keys(control.errors)[0];\n      switch (error) {\n        case 'required':\n          return 'The field is required';\n        case 'email':\n          return 'Must be an email';\n        case 'minlength':\n          return 'The field must be longer';\n        case 'mustMatch':\n          return 'The fields do not match';\n      }\n    }\n    return '';\n  }\n\n  statCase(s: string): string {\n    return _.startCase(s);\n  }\n}\n","<form [formGroup]=\"formGroup\">\n  <div class=\"space-y-3 text-sm\">\n    <div\n      *ngFor=\"let control of controls\"\n      class=\"flex flex-row justify-end items-center\"\n    >\n      <div class=\"flex flex-row justify-end items-center\">\n        <label\n          class=\"{{\n            control.value.dirty || control.value.touched\n              ? control.value.valid\n                ? ''\n                : 'text-red-600'\n              : ''\n          }} mr-2 font-semibold\"\n          >{{ statCase(control.name) }}:</label\n        >\n        <div class=\"flex flex-col\">\n          <input\n            formControlName=\"{{ control.name }}\"\n            type=\"{{\n              control.name.toLowerCase().includes('password')\n                ? 'password'\n                : 'text'\n            }}\"\n            class=\"{{\n              control.value.dirty || control.value.touched\n                ? control.value.valid\n                  ? ''\n                  : 'border border-red-600'\n                : ''\n            }} outline-none p-1\"\n          />\n          <span\n            *ngIf=\"\n              (control.value.dirty || control.value.touched) &&\n              control.value.invalid\n            \"\n            class=\"mt-1 text-xs text-red-600 font-semibold\"\n            >{{ getError(control.value) }}</span\n          >\n        </div>\n      </div>\n    </div>\n  </div>\n</form>\n"]}